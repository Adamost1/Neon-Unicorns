Neon Unicorns
Alvin Ye
Ahnaf Hasan
Zane Wang
pd 1
---------------------
Tic-Tac-Toe in the terminal


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Our proposal was too simple, so we decided to implement varying AI difficulty, and each AI with its own strategies
- We made an AI for easy difficulty
- We made an AI for medium difficulty
- We coded a way to make the AI check for two of a certain element in a row, column, or diagonal
- We made an AI for hard difficulty

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NONE

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Switch and case usage

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We changed ___ to ___ bc...

- we changed the tic-tac-toe board from int[][] to String[][] because String[][] will allow the toString() to be easier to code. int[][] is also unnessesary because we won't need to compare the elements using > < >= or <=. We will only need to use .equals()

- we decided to make the tic-tac-toe game 1 player because it is more challenging to design an AI rather than allow the user to play as 2 people. It is also more logical and fun to play a 1 player tic-tac-toe.

- we decided to move the code from the main method to multiple methods in order to make the code look neater.




LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- We learned that teamwork was very important in completing this project

- We learned that COMMENTS were very useful in keeping track of our code, especially in this project


||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


 ______   ______   __   __   __       ______   _______     
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__  
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\ 
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/ 
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \ 
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/ 
==============================================================
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


2018-15-1
--------------------------------------------------------------
Alvin Ye :: <Added proposal detailing future plans
Added the devlog
Updated proposal and the devlog
Changed uml to flowchart
Added a game-over system and a space-full system
Corrected indentation
Updated Woo.java
Renamed flowchart
Updated Woo.java to work with tie system
Modified Woo.java to include AIDiffM()
Included CheckTwo() inside AIDiffM()
Updated AIDiffM()
Added comments
>
Zane Wang :: <Edited devlog to personalize for the project
Edited REAMME.md with more information and an aestethic update
Added a better user interface and fixed issues with user input
Uploaded flowchart, revised uml, and the to-do list
Fixed the format of the bullets in todo.txt
Updated Woo.java so isWin can detect diagonals as well
Uploaded working Woo.java to root directory
Udated todo.txt
Implemented diagonal checks for wins and losses
Implemented randomness to the game
Completed AIDiffH()
Fixed bugs in Woo.java and removed debug lines
>
Ahnaf Hasan :: <Added Keyboard.java and the cs1 package to be
used in the tic-tac-toe game
Added UML and modified the proposal
Modified Woo.java to have the proto version of startGame()
Made a Test Files location to test files
Modified Woo.java to include an Easy AI with debug lines
Aesthetic update
Updated Woo.java with isFull() and a tie system
Updated Woo.java with a proto version of AIDiffH()
>
==============================================================
